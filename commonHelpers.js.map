{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";  // імпорт стилів для flatpickr\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";  // імпорт стилів для iziToast\n\n// Отримуємо елементи з DOM\nconst startButton = document.querySelector('button[data-start]');\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\n// Змінні для обраної дати і таймера\nlet userSelectedDate = null;\nlet timerId = null;\n\nstartButton.disabled = true; // Кнопка неактивна спочатку\n\n// Налаштування для flatpickr\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startButton.disabled = true; // Кнопка неактивна, якщо вибрана дата у минулому\n    } else {\n      userSelectedDate = selectedDate;\n      startButton.disabled = false; // Кнопка активується, якщо вибрана дата в майбутньому\n    }\n  },\n};\n\n// Ініціалізація flatpickr\nflatpickr(\"#datetime-picker\", options);\n\n// Додаємо слухач подій на кнопку старту таймера\nstartButton.addEventListener('click', () => {\n  if (!userSelectedDate) return;\n\n  startButton.disabled = true; // Деактивація кнопки після старту\n  document.querySelector('#datetime-picker').disabled = true; // Деактивація інпуту після старту\n  timerId = setInterval(updateCountdown, 1000); // Запуск таймера\n});\n\n// Функція для оновлення таймера\nfunction updateCountdown() {\n  const now = new Date(); // Отримуємо поточний час у мілісекундах\n  const timeLeft = userSelectedDate - now; // Обчислюємо різницю\n\n  // Перевірка на завершення таймера\n  if (timeLeft <= 0) {\n    clearInterval(timerId); // Зупинка таймера\n    document.querySelector('#datetime-picker').disabled = false; // Активується інпут для нової дати\n    startButton.disabled = true; // Кнопка залишається неактивною\n    updateInterface(0, 0, 0, 0); // Відображення 00:00:00:00  \n    // daysEl.textContent = '00';\n    // hoursEl.textContent = '00';\n    // minutesEl.textContent = '00';\n    // secondsEl.textContent = '00';\n    return;\n  }\n\n  // Конвертуємо мілісекунди в дні, години, хвилини і секунди\n    const { days, hours, minutes, seconds } = convertMs(timeLeft);\n    updateInterface(days, hours, minutes, seconds);\n}\n// Оновлюємо інтерфейс\nfunction updateInterface(days, hours, minutes, seconds) {\n  daysEl.textContent = addLeadingZero(days);\n  hoursEl.textContent = addLeadingZero(hours);\n  minutesEl.textContent = addLeadingZero(minutes);\n  secondsEl.textContent = addLeadingZero(seconds);\n}\n\n\n\n// Функція для конвертації мілісекунд\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n// Функція для додавання нуля перед числом, якщо воно менше двох символів\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\n// *************************************************************\n\n// const startButton = document.querySelector('button[data-start]');\n// const daysEl = document.querySelector('[data-days]');\n// const hoursEl = document.querySelector('[data-hours]');\n// const minutesEl = document.querySelector('[data-minutes]');\n// const secondsEl = document.querySelector('[data-seconds]');\n// let userSelectedDate = null;\n// let timerId = null;\n\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     const selectedDate = selectedDates[0];\n//     if (selectedDate <= new Date()) {\n//       iziToast.error({\n//         title: 'Error',\n//         message: 'Please choose a date in the future',\n//       });\n//       startButton.disabled = true;\n//     } else {\n//       userSelectedDate = selectedDate;\n//       startButton.disabled = false;\n//     }\n//   },\n// };\n\n// flatpickr(\"#datetime-picker\", options);\n\n// startButton.addEventListener('click', () => {\n//   if (!userSelectedDate) return;\n\n//   startButton.disabled = true;\n//   document.querySelector('#datetime-picker').disabled = true;\n//   timerId = setInterval(updateCountdown, 1000);\n// });\n\n// function updateCountdown() {\n//   const now = new Date();\n//   const timeLeft = userSelectedDate - now;\n\n//   if (timeLeft <= 0) {\n//     clearInterval(timerId);\n//     document.querySelector('#datetime-picker').disabled = false;\n//     startButton.disabled = true;\n//     return;\n//   }\n\n//   const { days, hours, minutes, seconds } = convertMs(timeLeft);\n\n//   daysEl.textContent = addLeadingZero(days);\n//   hoursEl.textContent = addLeadingZero(hours);\n//   minutesEl.textContent = addLeadingZero(minutes);\n//   secondsEl.textContent = addLeadingZero(seconds);\n// }\n\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = Math.floor(ms / day);\n//   const hours = Math.floor((ms % day) / hour);\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }\n\n// function addLeadingZero(value) {\n//   return String(value).padStart(2, '0');\n// }"],"names":["startButton","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","timerId","options","selectedDates","selectedDate","iziToast","flatpickr","updateCountdown","timeLeft","updateInterface","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"iyBAOA,MAAMA,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAGzD,IAAIC,EAAmB,KACnBC,EAAU,KAEdN,EAAY,SAAW,GAGvB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACtBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDV,EAAY,SAAW,KAEvBK,EAAmBI,EACnBT,EAAY,SAAW,GAE1B,CACH,EAGAW,EAAU,mBAAoBJ,CAAO,EAGrCP,EAAY,iBAAiB,QAAS,IAAM,CACrCK,IAELL,EAAY,SAAW,GACvB,SAAS,cAAc,kBAAkB,EAAE,SAAW,GACtDM,EAAU,YAAYM,EAAiB,GAAI,EAC7C,CAAC,EAGD,SAASA,GAAkB,CAEzB,MAAMC,EAAWR,EADL,IAAI,KAIhB,GAAIQ,GAAY,EAAG,CACjB,cAAcP,CAAO,EACrB,SAAS,cAAc,kBAAkB,EAAE,SAAW,GACtDN,EAAY,SAAW,GACvBc,EAAgB,EAAG,EAAG,EAAG,CAAC,EAK1B,MACD,CAGC,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAQ,EAC5DC,EAAgBC,EAAMC,EAAOC,EAASC,CAAO,CACjD,CAEA,SAASJ,EAAgBC,EAAMC,EAAOC,EAASC,EAAS,CACtDjB,EAAO,YAAcmB,EAAeL,CAAI,EACxCb,EAAQ,YAAckB,EAAeJ,CAAK,EAC1Cb,EAAU,YAAciB,EAAeH,CAAO,EAC9Cb,EAAU,YAAcgB,EAAeF,CAAO,CAChD,CAKA,SAASC,EAAUE,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAGA,SAASE,EAAeE,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}